// <auto-generated />
using System;
using GeocacheAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GeocacheAPI.Migrations
{
    [DbContext(typeof(GeocacheContext))]
    partial class GeocacheContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GeocacheAPI.Data.Geocache", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Moniker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Geocaches");
                });

            modelBuilder.Entity("GeocacheAPI.Data.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Activated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deactivated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GeocacheID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GeocacheID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("GeocacheAPI.Data.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GeocacheId")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GeocacheId")
                        .IsUnique();

                    b.ToTable("Location");
                });

            modelBuilder.Entity("GeocacheAPI.Data.Item", b =>
                {
                    b.HasOne("GeocacheAPI.Data.Geocache", "Geocache")
                        .WithMany("Items")
                        .HasForeignKey("GeocacheID");

                    b.Navigation("Geocache");
                });

            modelBuilder.Entity("GeocacheAPI.Data.Location", b =>
                {
                    b.HasOne("GeocacheAPI.Data.Geocache", "Geocache")
                        .WithOne("Location")
                        .HasForeignKey("GeocacheAPI.Data.Location", "GeocacheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Geocache");
                });

            modelBuilder.Entity("GeocacheAPI.Data.Geocache", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Location");
                });
#pragma warning restore 612, 618
        }
    }
}
